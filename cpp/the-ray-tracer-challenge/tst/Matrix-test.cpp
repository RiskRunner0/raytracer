#include "gtest/gtest.h"
#include "Matrix.h"

TEST(MatrixTests, SetsAndGets)
{
    Matrix m{4, 4};

    m(0, 0) = 1;
    m(0, 1) = 2;
    m(0, 2) = 3;
    m(0, 3) = 4;
    m(1, 0) = 5.5;
    m(1, 1) = 6.5;
    m(1, 2) = 7.5;
    m(1, 3) = 8.5;
    m(2, 0) = 9;
    m(2, 1) = 10;
    m(2, 2) = 11;
    m(2, 3) = 12;
    m(3, 0) = 13.5;
    m(3, 1) = 14.5;
    m(3, 2) = 15.5;
    m(3, 3) = 16.5;

    EXPECT_EQ(m(0, 0), 1);
    EXPECT_EQ(m(0, 1), 2);
    EXPECT_EQ(m(0, 2), 3);
    EXPECT_EQ(m(0, 3), 4);
    EXPECT_EQ(m(1, 0), 5.5);
    EXPECT_EQ(m(1, 1), 6.5);
    EXPECT_EQ(m(1, 2), 7.5);
    EXPECT_EQ(m(1, 3), 8.5);
    EXPECT_EQ(m(2, 0), 9);
    EXPECT_EQ(m(2, 1), 10);
    EXPECT_EQ(m(2, 2), 11);
    EXPECT_EQ(m(2, 3), 12);
    EXPECT_EQ(m(3, 0), 13.5);
    EXPECT_EQ(m(3, 1), 14.5);
    EXPECT_EQ(m(3, 2), 15.5);
    EXPECT_EQ(m(3, 3), 16.5);
}

TEST(MatrixTests, Dimensions) 
{
    Matrix m{2, 2};

    m(0, 0) = -3;
    m(0, 1) =  5;
    m(1, 0) =  1;
    m(1, 1) = -2;

    EXPECT_EQ(m(0, 0), -3);
    EXPECT_EQ(m(0, 1),  5);
    EXPECT_EQ(m(1, 0),  1);
    EXPECT_EQ(m(1, 1), -2);
}

TEST(MatrixTests, Comparison)
{
    Matrix A{4, 4};

    A(0, 0) = 1;
    A(0, 1) = 2;
    A(0, 2) = 3;
    A(0, 3) = 4;
    A(1, 0) = 5;
    A(1, 1) = 6;
    A(1, 2) = 7;
    A(1, 3) = 8;
    A(2, 0) = 9;
    A(2, 1) = 10;
    A(2, 2) = 11;
    A(2, 3) = 12;
    A(3, 0) = 13;
    A(3, 1) = 14;
    A(3, 2) = 15;
    A(3, 3) = 16;

    Matrix B{4, 4};

    B(0, 0) = 1;
    B(0, 1) = 2;
    B(0, 2) = 3;
    B(0, 3) = 4;
    B(1, 0) = 5;
    B(1, 1) = 6;
    B(1, 2) = 7;
    B(1, 3) = 8;
    B(2, 0) = 9;
    B(2, 1) = 10;
    B(2, 2) = 11;
    B(2, 3) = 12;
    B(3, 0) = 13;
    B(3, 1) = 14;
    B(3, 2) = 15;
    B(3, 3) = 16;

    EXPECT_TRUE(B == A);

    Matrix C{4, 4};

    C(0, 0) = 1;
    C(0, 1) = 2;
    C(0, 2) = 3;
    C(0, 3) = 4;
    C(1, 0) = 5;
    C(1, 1) = 6;
    C(1, 2) = 7;
    C(1, 3) = 8;
    C(2, 0) = 9;
    C(2, 1) = 10;
    C(2, 2) = 11;
    C(2, 3) = 12;
    C(3, 0) = 13;
    C(3, 1) = 14;
    C(3, 2) = 15;
    C(3, 3) = 16;

    Matrix D{4, 4};

    D(0, 0) = 1;
    D(0, 1) = 2;
    D(0, 2) = 3;
    D(0, 3) = 4;
    D(1, 0) = 5;
    D(1, 1) = 6;
    D(1, 2) = 7;
    D(1, 3) = 8;
    D(2, 0) = 9;
    D(2, 1) = 10;
    D(2, 2) = 11;
    D(2, 3) = 12;
    D(3, 0) = 13;
    D(3, 1) = 14;
    D(3, 2) = 15;
    D(3, 3) = 17;

    EXPECT_TRUE(C != D);
}